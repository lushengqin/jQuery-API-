{"version":3,"sources":["jQuery.js"],"names":["console","log","window","$","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","addClass","className","i","length","classList","add","oldApi","find","selector","array","elements2","from","concat","end","each","fn","call","parent","node","indexOf","parentNode","push","print","children"],"mappings":"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","file":"jQuery.5c69adcb.js","sourceRoot":"..\\src","sourcesContent":["console.log('你好 我是jQuery')\r\n// window.jQuery = function(selector){\r\n//     const elements = document.querySelectorAll(selector)\r\n//     //api 可以操作elements\r\n//     const api = {\r\n//         addClass(className){\r\n//             for(let i=0;i<elements.length;i++){\r\n//                 elements[i].classList.add(className)\r\n//             }\r\n//             // return null\r\n//             // return api  //返回API可以链接式操作\r\n//             // console.log(this)\r\n//             return this //this === api\r\n//         }\r\n//     }\r\n//     return api\r\n// }\r\n\r\nwindow.$ = window.jQuery = function(selectorOrArray){ //selectorOrArray是对象可以数组\r\n    let elements\r\n    if(typeof selectorOrArray ==='string'){ //如果它是字符串\r\n        elements = document.querySelectorAll(selectorOrArray);\r\n    }else if(selectorOrArray instanceof Array) {//如果它是数组\r\n        elements = selectorOrArray\r\n    }\r\n\r\n    \r\n    //返回一个对象\r\n    return {\r\n        addClass(className){\r\n            //循环化遍历elements\r\n            for(let i=0;i<elements.length ;i++){\r\n                console.log(elements.length)\r\n                elements[i].classList.add(className)  //函数访问外部的变量叫闭包            \r\n            }\r\n            console.log(2)\r\n            return this   //链式  api.('.test').('margin20')\r\n        },\r\n        oldApi : selectorOrArray.oldApi, //获取数组的oldApi\r\n        find(selector){\r\n            let array =[] //空数组\r\n            for(let i=0;i<elements.length;i++){\r\n                const elements2 = Array.from(elements[i].querySelectorAll(selector))\r\n                array = array.concat(elements2)\r\n                console.log(array[i])\r\n                // array = array.concat(Array.from(elements[i].querySelectorAll(selector)))\r\n                // console.log(array[i])\r\n            }\r\n            // const newApi = jQuery(array)\r\n            // return this\r\n            array.oldApi = this //this是旧的api\r\n            return jQuery(array)  //相当于上面两行  const newApi = jQuery(array) return this\r\n        },\r\n        end(){\r\n            return this.oldApi  //this是新的api\r\n        },\r\n        each(fn){\r\n            for(let i=0;i<elements.length;i++){\r\n                fn.call(null,elements[i],i)\r\n            }\r\n            return this \r\n        },\r\n        parent(){\r\n            const array =[]\r\n            this.each((node)=>{\r\n                if(array.indexOf(node.parentNode) === -1){\r\n                    //遍历的时候如果它的爸爸没有的话 那就等于-1  如果没有就打印出它的父元素 如果不写这行 会打印出四个body\r\n                    array.push(node.parentNode)\r\n                }\r\n            })\r\n            return jQuery(array)\r\n        },\r\n        print(){\r\n            console.log(elements)\r\n        },\r\n        children(){\r\n            const array =[]\r\n            this.each((node)=>{\r\n                if(array.indexOf(node.parentNode )=== -1){\r\n                    array.push(... node.children)  //... 等价于 node.children[0],node.children[1],node.children[2]\r\n                }\r\n            })\r\n            return jQuery(array)\r\n        }\r\n\r\n    }\r\n\r\n}\r\n// window.$ = window.jQuery  //这句话调用 以后用$就相当于jQuery"]}